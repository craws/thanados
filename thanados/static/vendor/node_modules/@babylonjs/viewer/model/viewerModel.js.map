{"version":3,"file":"viewerModel.js","sourceRoot":"","sources":["../../../../sourceES6/viewer/src/model/viewerModel.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDisposable } from \"@babylonjs/core/scene\";\nimport { ISceneLoaderPlugin, ISceneLoaderPluginAsync } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\nimport { IParticleSystem } from \"@babylonjs/core/Particles/IParticleSystem\";\nimport { Skeleton } from \"@babylonjs/core/Bones/skeleton\";\nimport { Observable } from \"@babylonjs/core/Misc/observable\";\nimport { SceneLoaderProgressEvent } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { AnimationGroup } from \"@babylonjs/core/Animations/animationGroup\";\nimport { Animation, Animatable, CircleEase, BackEase, BounceEase, CubicEase, ElasticEase, ExponentialEase, PowerEase, QuadraticEase, QuarticEase, QuinticEase, SineEase } from \"@babylonjs/core/Animations/index\";\nimport { Nullable } from \"@babylonjs/core/types\";\nimport { Quaternion, Vector3 } from \"@babylonjs/core/Maths/math.vector\";\nimport { Tags } from \"@babylonjs/core/Misc/tags\";\nimport { Material } from \"@babylonjs/core/Materials/material\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { MultiMaterial } from \"@babylonjs/core/Materials/multiMaterial\";\nimport { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { GLTFFileLoader } from \"@babylonjs/loaders/glTF/index\";\nimport { IAsset } from \"babylonjs-gltf2interface\";\nimport { IModelConfiguration } from \"../configuration/interfaces/modelConfiguration\";\nimport { IModelAnimationConfiguration } from \"../configuration/interfaces/modelAnimationConfiguration\";\nimport { IModelAnimation, GroupModelAnimation, AnimationPlayMode, ModelAnimationConfiguration, EasingFunction, AnimationState } from \"./modelAnimation\";\n\nimport { deepmerge, extendClassWithConfig } from '../helper/';\nimport { ObservablesManager } from \"../managers/observablesManager\";\nimport { ConfigurationContainer } from \"../configuration/configurationContainer\";\n\n/**\n * The current state of the model\n */\nexport enum ModelState {\n    INIT,\n    LOADING,\n    LOADED,\n    ENTRY,\n    ENTRYDONE,\n    COMPLETE,\n    CANCELED,\n    ERROR\n}\n\n/**\n * The viewer model is a container for all assets representing a sngle loaded model.\n */\nexport class ViewerModel implements IDisposable {\n    /**\n     * The loader used to load this model.\n     */\n    public loader: ISceneLoaderPlugin | ISceneLoaderPluginAsync;\n\n    private _animations: Array<IModelAnimation>;\n\n    /**\n     * the list of meshes that are a part of this model\n     */\n    private _meshes: Array<AbstractMesh> = [];\n    /**\n     * This model's root mesh (the parent of all other meshes).\n     * This mesh does not(!) exist in the meshes array.\n     */\n    public rootMesh: AbstractMesh;\n\n    private _pivotMesh: AbstractMesh;\n    /**\n     * ParticleSystems connected to this model\n     */\n    public particleSystems: Array<IParticleSystem> = [];\n    /**\n     * Skeletons defined in this model\n     */\n    public skeletons: Array<Skeleton> = [];\n    /**\n     * The current model animation.\n     * On init, this will be undefined.\n     */\n    public currentAnimation: IModelAnimation;\n\n    /**\n     * Observers registered here will be executed when the model is done loading\n     */\n    public onLoadedObservable: Observable<ViewerModel>;\n    /**\n     * Observers registered here will be executed when the loader notified of a progress event\n     */\n    public onLoadProgressObservable: Observable<SceneLoaderProgressEvent>;\n    /**\n     * Observers registered here will be executed when the loader notified of an error.\n     */\n    public onLoadErrorObservable: Observable<{ message: string; exception: any }>;\n\n    /**\n     * Will be executed after the model finished loading and complete, including entry animation and lod\n     */\n    public onCompleteObservable: Observable<ViewerModel>;\n    /**\n     * Observers registered here will be executed every time the model is being configured.\n     * This can be used to extend the model's configuration without extending the class itself\n     */\n    public onAfterConfigure: Observable<ViewerModel>;\n\n    /**\n     * The current model state (loaded, error, etc)\n     */\n    public state: ModelState;\n    /**\n     * A loadID provided by the modelLoader, unique to ths (Abstract)Viewer instance.\n     */\n    public loadId: number;\n\n    public loadInfo: IAsset;\n    private _loadedUrl: string;\n    private _modelConfiguration: IModelConfiguration;\n\n    private _loaderDone: boolean = false;\n\n    private _entryAnimation: ModelAnimationConfiguration;\n    private _exitAnimation: ModelAnimationConfiguration;\n    private _scaleTransition: Animation;\n    private _animatables: Array<Animatable> = [];\n    private _frameRate: number = 60;\n\n    private _shadowsRenderedAfterLoad: boolean = false;\n\n    constructor(private _observablesManager: ObservablesManager, modelConfiguration: IModelConfiguration, private _configurationContainer?: ConfigurationContainer) {\n        this.onLoadedObservable = new Observable();\n        this.onLoadErrorObservable = new Observable();\n        this.onLoadProgressObservable = new Observable();\n        this.onCompleteObservable = new Observable();\n        this.onAfterConfigure = new Observable();\n\n        this.state = ModelState.INIT;\n\n        let scene = this._configurationContainer && this._configurationContainer.scene;\n\n        this.rootMesh = new AbstractMesh(\"modelRootMesh\", scene);\n        this._pivotMesh = new AbstractMesh(\"pivotMesh\", scene);\n        this._pivotMesh.parent = this.rootMesh;\n        // rotate 180, gltf fun\n        this._pivotMesh.rotation.y += Math.PI;\n\n        this._scaleTransition = new Animation(\"scaleAnimation\", \"scaling\", this._frameRate, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\n\n        this._animations = [];\n        //create a copy of the configuration to make sure it doesn't change even after it is changed in the viewer\n        this._modelConfiguration = deepmerge((this._configurationContainer && this._configurationContainer.configuration.model) || {}, modelConfiguration);\n\n        if (this._observablesManager) { this._observablesManager.onModelAddedObservable.notifyObservers(this); }\n\n        if (this._modelConfiguration.entryAnimation) {\n            this.rootMesh.setEnabled(false);\n        }\n\n        this.onLoadedObservable.add(() => {\n            this.updateConfiguration(this._modelConfiguration);\n            if (this._observablesManager) { this._observablesManager.onModelLoadedObservable.notifyObservers(this); }\n            this._initAnimations();\n        });\n\n        this.onCompleteObservable.add(() => {\n            this.state = ModelState.COMPLETE;\n        });\n    }\n\n    public get shadowsRenderedAfterLoad() {\n        return this._shadowsRenderedAfterLoad;\n    }\n\n    public set shadowsRenderedAfterLoad(rendered: boolean) {\n        if (!rendered) {\n            throw new Error(\"can only be enabled\");\n        } else {\n            this._shadowsRenderedAfterLoad = rendered;\n        }\n    }\n\n    public getViewerId() {\n        return this._configurationContainer && this._configurationContainer.viewerId;\n    }\n\n    /**\n     * Is this model enabled?\n     */\n    public get enabled() {\n        return this.rootMesh.isEnabled();\n    }\n\n    /**\n     * Set whether this model is enabled or not.\n     */\n    public set enabled(enable: boolean) {\n        this.rootMesh.setEnabled(enable);\n    }\n\n    public set loaderDone(done: boolean) {\n        this._loaderDone = done;\n        this._checkCompleteState();\n    }\n\n    private _checkCompleteState() {\n        if (this._loaderDone && (this.state === ModelState.ENTRYDONE)) {\n            this._modelComplete();\n        }\n    }\n\n    /**\n     * Add a mesh to this model.\n     * Any mesh that has no parent will be provided with the root mesh as its new parent.\n     *\n     * @param mesh the new mesh to add\n     * @param triggerLoaded should this mesh trigger the onLoaded observable. Used when adding meshes manually.\n     */\n    public addMesh(mesh: AbstractMesh, triggerLoaded?: boolean) {\n        if (!mesh.parent) {\n            mesh.parent = this._pivotMesh;\n        }\n\n        if (mesh.getClassName() !== \"InstancedMesh\") {\n            mesh.receiveShadows = !!this.configuration.receiveShadows;\n        }\n\n        this._meshes.push(mesh);\n        if (triggerLoaded) {\n            return this.onLoadedObservable.notifyObserversWithPromise(this);\n        }\n    }\n\n    /**\n     * get the list of meshes (excluding the root mesh)\n     */\n    public get meshes() {\n        return this._meshes;\n    }\n\n    /**\n     * Get the model's configuration\n     */\n    public get configuration(): IModelConfiguration {\n        return this._modelConfiguration;\n    }\n\n    /**\n     * (Re-)set the model's entire configuration\n     * @param newConfiguration the new configuration to replace the new one\n     */\n    public set configuration(newConfiguration: IModelConfiguration) {\n        this._modelConfiguration = newConfiguration;\n        this._configureModel();\n    }\n\n    /**\n     * Update the current configuration with new values.\n     * Configuration will not be overwritten, but merged with the new configuration.\n     * Priority is to the new configuration\n     * @param newConfiguration the configuration to be merged into the current configuration;\n     */\n    public updateConfiguration(newConfiguration: Partial<IModelConfiguration>) {\n        this._modelConfiguration = deepmerge(this._modelConfiguration, newConfiguration);\n        this._configureModel();\n    }\n\n    private _initAnimations() {\n        // check if this is not a gltf loader and init the animations\n        if (this.skeletons.length) {\n            this.skeletons.forEach((skeleton, idx) => {\n                let ag = new AnimationGroup(\"animation-\" + idx, this._configurationContainer && this._configurationContainer.scene);\n                let add = false;\n                skeleton.getAnimatables().forEach((a) => {\n                    if (a.animations && a.animations[0]) {\n                        ag.addTargetedAnimation(a.animations[0], a);\n                        add = true;\n                    }\n                });\n                if (add) {\n                    this.addAnimationGroup(ag);\n                }\n            });\n        }\n\n        let completeCallback = () => {\n\n        };\n\n        if (this._modelConfiguration.animation) {\n            if (this._modelConfiguration.animation.playOnce) {\n                this._animations.forEach((a) => {\n                    a.playMode = AnimationPlayMode.ONCE;\n                });\n            }\n            if (this._modelConfiguration.animation.autoStart && this._animations.length) {\n                let animationName = this._modelConfiguration.animation.autoStart === true ?\n                    this._animations[0].name : this._modelConfiguration.animation.autoStart;\n\n                completeCallback = () => {\n                    this.playAnimation(animationName);\n                };\n            }\n        }\n\n        this._enterScene(completeCallback);\n    }\n\n    /**\n     * Animates the model from the current position to the default position\n     * @param completeCallback A function to call when the animation has completed\n     */\n    private _enterScene(completeCallback?: () => void): void {\n        const scene = this.rootMesh.getScene();\n        let previousValue = scene.animationPropertiesOverride!.enableBlending;\n        let callback = () => {\n            this.state = ModelState.ENTRYDONE;\n            scene.animationPropertiesOverride!.enableBlending = previousValue;\n            this._checkCompleteState();\n            if (completeCallback) { completeCallback(); }\n        };\n        if (!this._entryAnimation) {\n            callback();\n            return;\n        }\n        this.rootMesh.setEnabled(true);\n        // disable blending for the sake of the entry animation;\n        scene.animationPropertiesOverride!.enableBlending = false;\n        this._applyAnimation(this._entryAnimation, true, callback);\n    }\n\n    /**\n     * Animates the model from the current position to the exit-screen position\n     * @param completeCallback A function to call when the animation has completed\n     */\n    private _exitScene(completeCallback: () => void): void {\n        if (!this._exitAnimation) {\n            completeCallback();\n            return;\n        }\n\n        this._applyAnimation(this._exitAnimation, false, completeCallback);\n    }\n\n    private _modelComplete() {\n        //reapply material defines to be sure:\n        let meshes = this._pivotMesh.getChildMeshes(false);\n        meshes.filter((m) => m.material).forEach((mesh) => {\n            this._applyModelMaterialConfiguration(mesh.material!);\n        });\n        this.state = ModelState.COMPLETE;\n        this.onCompleteObservable.notifyObservers(this);\n    }\n\n    /**\n     * Add a new animation group to this model.\n     * @param animationGroup the new animation group to be added\n     */\n    public addAnimationGroup(animationGroup: AnimationGroup) {\n        this._animations.push(new GroupModelAnimation(animationGroup));\n    }\n\n    /**\n     * Get the ModelAnimation array\n     */\n    public getAnimations(): Array<IModelAnimation> {\n        return this._animations;\n    }\n\n    /**\n     * Get the animations' names. Using the names you can play a specific animation.\n     */\n    public getAnimationNames(): Array<string> {\n        return this._animations.map((a) => a.name);\n    }\n\n    /**\n     * Get an animation by the provided name. Used mainly when playing n animation.\n     * @param name the name of the animation to find\n     */\n    protected _getAnimationByName(name: string): Nullable<IModelAnimation> {\n        // can't use .find, noe available on IE\n        let filtered = this._animations.filter((a) => a.name === name.trim());\n        // what the next line means - if two animations have the same name, they will not be returned!\n        if (filtered.length === 1) {\n            return filtered[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Choose an initialized animation using its name and start playing it\n     * @param name the name of the animation to play\n     * @returns The model aniamtion to be played.\n     */\n    public playAnimation(name: string): IModelAnimation {\n        let animation = this.setCurrentAnimationByName(name);\n        if (animation) {\n            animation.start();\n        }\n        return animation;\n    }\n\n    public setCurrentAnimationByName(name: string) {\n        let animation = this._getAnimationByName(name.trim());\n        if (animation) {\n            if (this.currentAnimation && this.currentAnimation.state !== AnimationState.STOPPED) {\n                this.currentAnimation.stop();\n            }\n            this.currentAnimation = animation;\n            return animation;\n        } else {\n            throw new Error(\"animation not found - \" + name);\n        }\n    }\n\n    private _configureModel() {\n        // this can be changed to the meshes that have rootMesh a parent without breaking anything.\n        let meshesWithNoParent: Array<AbstractMesh> = [this.rootMesh]; //this._meshes.filter(m => m.parent === this.rootMesh);\n        let updateMeshesWithNoParent = (variable: string, value: any, param?: string) => {\n            meshesWithNoParent.forEach((mesh) => {\n                if (param) {\n                    mesh[variable][param] = value;\n                } else {\n                    mesh[variable] = value;\n                }\n            });\n        };\n        let updateXYZ = (variable: string, configValues: { x: number, y: number, z: number, w?: number }) => {\n            if (configValues.x !== undefined) {\n                updateMeshesWithNoParent(variable, configValues.x, 'x');\n            }\n            if (configValues.y !== undefined) {\n                updateMeshesWithNoParent(variable, configValues.y, 'y');\n            }\n            if (configValues.z !== undefined) {\n                updateMeshesWithNoParent(variable, configValues.z, 'z');\n            }\n            if (configValues.w !== undefined) {\n                updateMeshesWithNoParent(variable, configValues.w, 'w');\n            }\n        };\n\n        if (this._modelConfiguration.normalize) {\n            let center = false;\n            let unitSize = false;\n            let parentIndex;\n            if (this._modelConfiguration.normalize === true) {\n                center = true;\n                unitSize = true;\n            } else {\n                center = !!this._modelConfiguration.normalize.center;\n                unitSize = !!this._modelConfiguration.normalize.unitSize;\n                parentIndex = this._modelConfiguration.normalize.parentIndex;\n            }\n\n            let meshesToNormalize: Array<AbstractMesh> = [];\n            if (parentIndex !== undefined) {\n                meshesToNormalize.push(this._meshes[parentIndex]);\n            } else {\n                meshesToNormalize = this._pivotMesh.getChildMeshes(true).length === 1 ? [this._pivotMesh] : meshesWithNoParent;\n            }\n\n            if (unitSize) {\n                meshesToNormalize.forEach((mesh) => {\n                    mesh.normalizeToUnitCube(true);\n                    mesh.computeWorldMatrix(true);\n                });\n            }\n            if (center) {\n                meshesToNormalize.forEach((mesh) => {\n                    const boundingInfo = mesh.getHierarchyBoundingVectors(true);\n                    const sizeVec = boundingInfo.max.subtract(boundingInfo.min);\n                    const halfSizeVec = sizeVec.scale(0.5);\n                    const center = boundingInfo.min.add(halfSizeVec);\n                    mesh.position = center.scale(-1);\n\n                    mesh.position.y += halfSizeVec.y;\n\n                    // Recompute Info.\n                    mesh.computeWorldMatrix(true);\n                });\n            }\n        } else {\n            // if centered, should be done here\n        }\n\n        // position?\n        if (this._modelConfiguration.position) {\n            updateXYZ('position', this._modelConfiguration.position);\n        }\n        if (this._modelConfiguration.rotation) {\n            //quaternion?\n            if (this._modelConfiguration.rotation.w) {\n                meshesWithNoParent.forEach((mesh) => {\n                    if (!mesh.rotationQuaternion) {\n                        mesh.rotationQuaternion = new Quaternion();\n                    }\n                });\n                updateXYZ('rotationQuaternion', this._modelConfiguration.rotation);\n            } else {\n                updateXYZ('rotation', this._modelConfiguration.rotation);\n            }\n        }\n\n        if (this._modelConfiguration.rotationOffsetAxis) {\n            let rotationAxis = new Vector3(0, 0, 0).copyFrom(this._modelConfiguration.rotationOffsetAxis as Vector3);\n\n            meshesWithNoParent.forEach((m) => {\n                if (this._modelConfiguration.rotationOffsetAngle) {\n                    m.rotate(rotationAxis, this._modelConfiguration.rotationOffsetAngle);\n                }\n            });\n\n        }\n\n        if (this._modelConfiguration.scaling) {\n            updateXYZ('scaling', this._modelConfiguration.scaling);\n        }\n\n        if (this._modelConfiguration.castShadow) {\n            this._meshes.forEach((mesh) => {\n                Tags.AddTagsTo(mesh, 'castShadow');\n            });\n        }\n\n        let meshes = this._pivotMesh.getChildMeshes(false);\n        meshes.filter((m) => m.material).forEach((mesh) => {\n            this._applyModelMaterialConfiguration(mesh.material!);\n        });\n\n        if (this._modelConfiguration.entryAnimation) {\n            this._entryAnimation = this._modelAnimationConfigurationToObject(this._modelConfiguration.entryAnimation);\n        }\n\n        if (this._modelConfiguration.exitAnimation) {\n            this._exitAnimation = this._modelAnimationConfigurationToObject(this._modelConfiguration.exitAnimation);\n        }\n\n        this.onAfterConfigure.notifyObservers(this);\n    }\n\n    private _modelAnimationConfigurationToObject(animConfig: IModelAnimationConfiguration): ModelAnimationConfiguration {\n        let anim: ModelAnimationConfiguration = {\n            time: 0.5\n        };\n        if (animConfig.scaling) {\n            anim.scaling = Vector3.Zero();\n        }\n        if (animConfig.easingFunction !== undefined) {\n            anim.easingFunction = animConfig.easingFunction;\n        }\n        if (animConfig.easingMode !== undefined) {\n            anim.easingMode = animConfig.easingMode;\n        }\n        extendClassWithConfig(anim, animConfig);\n        return anim;\n    }\n\n    /**\n     * Apply a material configuration to a material\n     * @param material Material to apply configuration to\n     * @hidden\n     */\n    public _applyModelMaterialConfiguration(material: Material) {\n        if (!this._modelConfiguration.material) { return; }\n\n        extendClassWithConfig(material, this._modelConfiguration.material);\n\n        if (material instanceof PBRMaterial) {\n            if (this._modelConfiguration.material.directIntensity !== undefined) {\n                material.directIntensity = this._modelConfiguration.material.directIntensity;\n            }\n\n            if (this._modelConfiguration.material.emissiveIntensity !== undefined) {\n                material.emissiveIntensity = this._modelConfiguration.material.emissiveIntensity;\n            }\n\n            if (this._modelConfiguration.material.environmentIntensity !== undefined) {\n                material.environmentIntensity = this._modelConfiguration.material.environmentIntensity;\n            }\n\n            if (this._modelConfiguration.material.directEnabled !== undefined) {\n                material.disableLighting = !this._modelConfiguration.material.directEnabled;\n            }\n            if (this._configurationContainer && this._configurationContainer.reflectionColor) {\n                material.reflectionColor = this._configurationContainer.reflectionColor.clone();\n            }\n        }\n        else if (material instanceof MultiMaterial) {\n            for (let i = 0; i < material.subMaterials.length; i++) {\n                const subMaterial = material.subMaterials[i];\n                if (subMaterial) {\n                    this._applyModelMaterialConfiguration(subMaterial);\n                }\n            }\n        }\n    }\n\n    /**\n     * Start entry/exit animation given an animation configuration\n     * @param animationConfiguration Entry/Exit animation configuration\n     * @param isEntry Pass true if the animation is an entry animation\n     * @param completeCallback Callback to execute when the animation completes\n     */\n    private _applyAnimation(animationConfiguration: ModelAnimationConfiguration, isEntry: boolean, completeCallback?: () => void) {\n        let animations: Animation[] = [];\n\n        //scale\n        if (animationConfiguration.scaling) {\n\n            let scaleStart: Vector3 = isEntry ? animationConfiguration.scaling : new Vector3(1, 1, 1);\n            let scaleEnd: Vector3 = isEntry ? new Vector3(1, 1, 1) : animationConfiguration.scaling;\n\n            if (!scaleStart.equals(scaleEnd)) {\n                this.rootMesh.scaling = scaleStart;\n                this._setLinearKeys(\n                    this._scaleTransition,\n                    this.rootMesh.scaling,\n                    scaleEnd,\n                    animationConfiguration.time\n                );\n                animations.push(this._scaleTransition);\n            }\n        }\n\n        //Start the animation(s)\n        this.transitionTo(\n            animations,\n            animationConfiguration.time,\n            this._createEasingFunction(animationConfiguration.easingFunction),\n            animationConfiguration.easingMode,\n            () => { if (completeCallback) { completeCallback(); } }\n        );\n    }\n\n    /**\n    * Begin @animations with the specified @easingFunction\n    * @param animations The BABYLON Animations to begin\n    * @param duration of transition, in seconds\n    * @param easingFunction An easing function to apply\n    * @param easingMode A easing mode to apply to the easingFunction\n    * @param onAnimationEnd Call back trigger at the end of the animation.\n    */\n    public transitionTo(\n        animations: Animation[],\n        duration: number,\n        easingFunction: any,\n        easingMode: number = 2, // BABYLON.EasingFunction.EASINGMODE_EASEINOUT,\n        onAnimationEnd: () => void): void {\n\n        if (easingFunction) {\n            for (let animation of animations) {\n                easingFunction.setEasingMode(easingMode);\n                animation.setEasingFunction(easingFunction);\n            }\n        }\n\n        //Stop any current animations before starting the new one - merging not yet supported.\n        this.stopAllAnimations();\n\n        this.rootMesh.animations = animations;\n\n        if (this.rootMesh.getScene().beginAnimation) {\n            let animatable: Animatable = this.rootMesh.getScene().beginAnimation(this.rootMesh, 0, this._frameRate * duration, false, 1, () => {\n                if (onAnimationEnd) {\n                    onAnimationEnd();\n                }\n            });\n            this._animatables.push(animatable);\n        }\n    }\n\n    /**\n     * Sets key values on an Animation from first to last frame.\n     * @param animation The Babylon animation object to set keys on\n     * @param startValue The value of the first key\n     * @param endValue The value of the last key\n     * @param duration The duration of the animation, used to determine the end frame\n     */\n    private _setLinearKeys(animation: Animation, startValue: any, endValue: any, duration: number) {\n        animation.setKeys([\n            {\n                frame: 0,\n                value: startValue\n            },\n            {\n                frame: this._frameRate * duration,\n                value: endValue\n            }\n        ]);\n    }\n\n    /**\n     * Creates and returns a Babylon easing funtion object based on a string representing the Easing function\n     * @param easingFunctionID The enum of the easing funtion to create\n     * @return The newly created Babylon easing function object\n     */\n    private _createEasingFunction(easingFunctionID?: number): any {\n        let easingFunction;\n\n        switch (easingFunctionID) {\n            case EasingFunction.CircleEase:\n                easingFunction = new CircleEase();\n                break;\n            case EasingFunction.BackEase:\n                easingFunction = new BackEase(0.3);\n                break;\n            case EasingFunction.BounceEase:\n                easingFunction = new BounceEase();\n                break;\n            case EasingFunction.CubicEase:\n                easingFunction = new CubicEase();\n                break;\n            case EasingFunction.ElasticEase:\n                easingFunction = new ElasticEase();\n                break;\n            case EasingFunction.ExponentialEase:\n                easingFunction = new ExponentialEase();\n                break;\n            case EasingFunction.PowerEase:\n                easingFunction = new PowerEase();\n                break;\n            case EasingFunction.QuadraticEase:\n                easingFunction = new QuadraticEase();\n                break;\n            case EasingFunction.QuarticEase:\n                easingFunction = new QuarticEase();\n                break;\n            case EasingFunction.QuinticEase:\n                easingFunction = new QuinticEase();\n                break;\n            case EasingFunction.SineEase:\n                easingFunction = new SineEase();\n                break;\n            default:\n                Tools.Log(\"No ease function found\");\n                break;\n        }\n\n        return easingFunction;\n    }\n\n    /**\n     * Stops and removes all animations that have been applied to the model\n     */\n    public stopAllAnimations(): void {\n        if (this.rootMesh) {\n            this.rootMesh.animations = [];\n        }\n        if (this.currentAnimation) {\n            this.currentAnimation.stop();\n        }\n        while (this._animatables.length) {\n            this._animatables[0].onAnimationEnd = null;\n            this._animatables[0].stop();\n            this._animatables.shift();\n        }\n    }\n\n    /**\n     * Will remove this model from the viewer (but NOT dispose it).\n     */\n    public remove() {\n        this.stopAllAnimations();\n\n        // hide it\n        this.rootMesh.isVisible = false;\n        if (this._observablesManager) { this._observablesManager.onModelRemovedObservable.notifyObservers(this); }\n    }\n\n    /**\n     * Dispose this model, including all of its associated assets.\n     */\n    public dispose() {\n        this.remove();\n        this.onAfterConfigure.clear();\n        this.onLoadedObservable.clear();\n        this.onLoadErrorObservable.clear();\n        this.onLoadProgressObservable.clear();\n        if (this.loader && this.loader.name === \"gltf\") {\n            (<GLTFFileLoader>this.loader).dispose();\n        }\n        this.particleSystems.forEach((ps) => ps.dispose());\n        this.particleSystems.length = 0;\n        this.skeletons.forEach((s) => s.dispose());\n        this.skeletons.length = 0;\n        this._animations.forEach((ag) => ag.dispose());\n        this._animations.length = 0;\n        this.rootMesh.dispose(false, true);\n    }\n}\n"]}