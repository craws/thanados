{"version":3,"file":"renderOnlyLoader.js","sourceRoot":"","sources":["../../../../sourceES6/viewer/src/configuration/renderOnlyLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { mapperManager } from './mappers';\r\nimport { ViewerConfiguration } from './configuration';\r\nimport { processConfigurationCompatibility } from './configurationCompatibility';\r\n\r\nimport { deepmerge } from '../helper';\r\nimport { Tools } from '@babylonjs/core/Misc/tools';\r\nimport { extendedConfiguration } from './types/extended';\r\nimport { renderOnlyDefaultConfiguration } from './types/renderOnlyDefault';\r\nimport { IFileRequest } from '@babylonjs/core/Misc/fileRequest';\r\n\r\n/**\r\n * The configuration loader will load the configuration object from any source and will use the defined mapper to\r\n * parse the object and return a conform ViewerConfiguration.\r\n * It is a private member of the scene.\r\n */\r\nexport class RenderOnlyConfigurationLoader {\r\n\r\n    private _configurationCache: { [url: string]: any };\r\n\r\n    private _loadRequests: Array<IFileRequest>;\r\n\r\n    constructor(private _enableCache: boolean = false) {\r\n        this._configurationCache = {};\r\n        this._loadRequests = [];\r\n    }\r\n\r\n    private _getConfigurationTypeExcludeTemplate(types: string): ViewerConfiguration {\r\n        let config: ViewerConfiguration = {};\r\n        let typesSeparated = types.split(\",\");\r\n        typesSeparated.forEach((type) => {\r\n            switch (type.trim()) {\r\n                case 'default':\r\n                    config = deepmerge(config, renderOnlyDefaultConfiguration);\r\n                    break;\r\n                case 'none':\r\n                    break;\r\n                case 'extended':\r\n                default:\r\n                    config = deepmerge(config, extendedConfiguration);\r\n                    break;\r\n            }\r\n            if (config.extends) {\r\n                config = deepmerge(config, this._getConfigurationTypeExcludeTemplate(config.extends));\r\n            }\r\n        });\r\n        return config;\r\n    };\r\n\r\n    protected getExtendedConfig(type: string | undefined) {\r\n        return this._getConfigurationTypeExcludeTemplate(type || \"extended\");\r\n    }\r\n\r\n    /**\r\n     * load a configuration object that is defined in the initial configuration provided.\r\n     * The viewer configuration can extend different types of configuration objects and have an extra configuration defined.\r\n     *\r\n     * @param initConfig the initial configuration that has the definitions of further configuration to load.\r\n     * @param callback an optional callback that will be called sync, if noconfiguration needs to be loaded or configuration is payload-only\r\n     * @returns A promise that delivers the extended viewer configuration, when done.\r\n     */\r\n    public loadConfiguration(initConfig: ViewerConfiguration = {}, callback?: (config: ViewerConfiguration) => void): Promise<ViewerConfiguration> {\r\n\r\n        let loadedConfig: ViewerConfiguration = deepmerge({}, initConfig);\r\n        this._processInitialConfiguration(loadedConfig);\r\n\r\n        let extendedConfiguration = this.getExtendedConfig(loadedConfig.extends);\r\n\r\n        if (loadedConfig.configuration) {\r\n\r\n            let mapperType = \"json\";\r\n            return Promise.resolve().then(() => {\r\n                if (typeof loadedConfig.configuration === \"string\" || (loadedConfig.configuration && loadedConfig.configuration.url)) {\r\n                    // a file to load\r\n\r\n                    let url: string = '';\r\n                    if (typeof loadedConfig.configuration === \"string\") {\r\n                        url = loadedConfig.configuration;\r\n                    }\r\n\r\n                    // if configuration is an object\r\n                    if (typeof loadedConfig.configuration === \"object\" && loadedConfig.configuration.url) {\r\n                        url = loadedConfig.configuration.url;\r\n                        let type = loadedConfig.configuration.mapper;\r\n                        // empty string?\r\n                        if (!type) {\r\n                            // load mapper type from filename / url\r\n                            type = loadedConfig.configuration.url.split('.').pop();\r\n                        }\r\n                        mapperType = type || mapperType;\r\n                    }\r\n                    return this._loadFile(url);\r\n                } else {\r\n                    if (typeof loadedConfig.configuration === \"object\") {\r\n                        mapperType = loadedConfig.configuration.mapper || mapperType;\r\n                        return loadedConfig.configuration.payload || {};\r\n                    }\r\n                    return {};\r\n\r\n                }\r\n            }).then((data: any) => {\r\n                let mapper = mapperManager.getMapper(mapperType);\r\n                let parsed = deepmerge(mapper.map(data), loadedConfig);\r\n                let merged = deepmerge(extendedConfiguration, parsed);\r\n                processConfigurationCompatibility(merged);\r\n                if (callback) { callback(merged); }\r\n                return merged;\r\n            });\r\n        } else {\r\n            loadedConfig = deepmerge(extendedConfiguration, loadedConfig);\r\n            processConfigurationCompatibility(loadedConfig);\r\n            if (callback) { callback(loadedConfig); }\r\n            return Promise.resolve(loadedConfig);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the configuration loader. This will cancel file requests, if active.\r\n     */\r\n    public dispose() {\r\n        this._loadRequests.forEach((request) => {\r\n            request.abort();\r\n        });\r\n        this._loadRequests.length = 0;\r\n    }\r\n\r\n    /**\r\n     * This function will process the initial configuration and make needed changes for the viewer to work.\r\n     * @param config the mutable(!) initial configuration to process\r\n     */\r\n    private _processInitialConfiguration(config: ViewerConfiguration) {\r\n        if (config.model) {\r\n            if (typeof config.model === \"string\") {\r\n                config.model = {\r\n                    url: config.model\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _loadFile(url: string): Promise<any> {\r\n        let cacheReference = this._configurationCache;\r\n        if (this._enableCache && cacheReference[url]) {\r\n            return Promise.resolve(cacheReference[url]);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let fileRequest = Tools.LoadFile(url, (result) => {\r\n                let idx = this._loadRequests.indexOf(fileRequest);\r\n                if (idx !== -1) {\r\n                    this._loadRequests.splice(idx, 1);\r\n                }\r\n                if (this._enableCache) { cacheReference[url] = result; }\r\n                resolve(result);\r\n            }, undefined, undefined, false, (request, error: any) => {\r\n                let idx = this._loadRequests.indexOf(fileRequest);\r\n                if (idx !== -1) {\r\n                    this._loadRequests.splice(idx, 1);\r\n                }\r\n                reject(error);\r\n            });\r\n            this._loadRequests.push(fileRequest);\r\n        });\r\n    }\r\n\r\n}"]}