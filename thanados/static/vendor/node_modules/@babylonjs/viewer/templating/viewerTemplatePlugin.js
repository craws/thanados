import * as Handlebars from 'handlebars/dist/handlebars';
var AbstractViewerNavbarButton = /** @class */ (function () {
    function AbstractViewerNavbarButton(buttonName, buttonClass, htmlTemplate) {
        this.templateName = "navBar";
        this.eventsToAttach = ['pointerdown'];
        this._prepend = true;
        this._buttonName = buttonName;
        if (buttonClass) {
            this._buttonClass = buttonClass;
        }
        else {
            this._buttonClass = buttonName + '-button';
        }
        if (htmlTemplate) {
            this._htmlTemplate = htmlTemplate;
        }
        else {
            this._htmlTemplate = "\n<button class=\"" + this._buttonClass + "\">\n    <span class=\"icon " + this._buttonName + "-icon\"></span>\n</button>\n";
        }
    }
    AbstractViewerNavbarButton.prototype.interactionPredicate = function (event) {
        var pointerDown = event.event;
        if (pointerDown.button !== 0) {
            return false;
        }
        var element = event.event.target;
        if (!element) {
            return false;
        }
        var elementClasses = element.classList;
        for (var i = 0; i < elementClasses.length; ++i) {
            var className = elementClasses[i];
            if (className.indexOf(this._buttonClass) !== -1) {
                return true;
            }
        }
        return false;
    };
    AbstractViewerNavbarButton.prototype.addHTMLTemplate = function (template) {
        var element = this._generateHTMLElement(template);
        var container = template.parent.querySelector("div.default-control");
        if (container) {
            if (this._prepend) {
                container.insertBefore(element, container.firstChild);
            }
            else {
                container.appendChild(element);
            }
        }
    };
    AbstractViewerNavbarButton.prototype._generateHTMLElement = function (template) {
        var compiledTemplate = Handlebars.compile(this._htmlTemplate, { noEscape: (template.configuration.params && !!template.configuration.params.noEscape) });
        var config = template.configuration.params || {};
        var rawHtml = compiledTemplate(config);
        var fragment;
        try {
            fragment = document.createRange().createContextualFragment(rawHtml);
        }
        catch (e) {
            var test_1 = document.createElement(this._buttonClass);
            test_1.innerHTML = rawHtml;
            fragment = test_1;
        }
        return fragment;
    };
    return AbstractViewerNavbarButton;
}());
export { AbstractViewerNavbarButton };
//# sourceMappingURL=viewerTemplatePlugin.js.map