{"version":3,"file":"renderOnlyViewer.js","sourceRoot":"","sources":["../../../../sourceES6/viewer/src/viewer/renderOnlyViewer.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAE1C;IAAsC,oCAAc;IAChD,0BAAmB,gBAAyB,EAAE,oBAA8C;QAA9C,qCAAA,EAAA,yBAA8C;QAA5F,YACI,kBAAM,gBAAgB,EAAE,oBAAoB,CAAC,SAEhD;QAHkB,sBAAgB,GAAhB,gBAAgB,CAAS;QAExC,KAAI,CAAC,OAAO,GAAG,gBAAqC,CAAA;;IACxD,CAAC;IACM,qCAAU,GAAjB;QAAA,iBAiBC;QAhBG,IAAI,QAAQ,GAAG,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1H,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM;YAClC,OAAO,KAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC,IAAI,CAAC;YACJ,KAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,QAAQ,EAAE;gBACV,OAAO,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,aAAa,CAAC,KAAM,CAAC,CAAC,KAAK,CAAC,cAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAQ,OAAO,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACrH;iBAAM;gBACH,OAAO,KAAI,CAAC,YAAY,CAAC,KAAK,IAAI,KAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC3F;QACL,CAAC,CAAC,CAAC,IAAI,CAAC;YACJ,OAAO,KAAI,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,KAAI,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,CAAC;YACP,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1B,OAAO,KAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IACS,mDAAwB,GAAlC;IACA,CAAC;IACL,uBAAC;AAAD,CAAC,AAzBD,CAAsC,cAAc,GAyBnD","sourcesContent":["\r\nimport { ViewerConfiguration } from '../configuration';\r\nimport { AbstractViewer } from './viewer';\r\n\r\nexport class RenderOnlyViewer extends AbstractViewer {\r\n    constructor(public containerElement: Element, initialConfiguration: ViewerConfiguration = {}) {\r\n        super(containerElement, initialConfiguration);\r\n        this._canvas = containerElement as HTMLCanvasElement\r\n    }\r\n    public initialize(){\r\n        let autoLoad = typeof this.configuration.model === 'string' || (this.configuration.model && this.configuration.model.url);\r\n        return this._initEngine().then((engine) => {\r\n            return this.onEngineInitObservable.notifyObserversWithPromise(engine);\r\n        }).then(() => {\r\n            this._initTelemetryEvents();\r\n            if (autoLoad) {\r\n                return this.loadModel(this.configuration.model!).catch(() => { }).then(() => { return this.sceneManager.scene; });\r\n            } else {\r\n                return this.sceneManager.scene || this.sceneManager.initScene(this.configuration.scene);\r\n            }\r\n        }).then(() => {\r\n            return this.onInitDoneObservable.notifyObserversWithPromise(this);\r\n        }).catch((e) => {\r\n            console.log(e.toString());\r\n            return this;\r\n        });\r\n    }\r\n    protected _prepareContainerElement() {\r\n    }\r\n}"]}