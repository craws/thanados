var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AbstractViewer } from './viewer';
var RenderOnlyViewer = /** @class */ (function (_super) {
    __extends(RenderOnlyViewer, _super);
    function RenderOnlyViewer(containerElement, initialConfiguration) {
        if (initialConfiguration === void 0) { initialConfiguration = {}; }
        var _this = _super.call(this, containerElement, initialConfiguration) || this;
        _this.containerElement = containerElement;
        _this._canvas = containerElement;
        return _this;
    }
    RenderOnlyViewer.prototype.initialize = function () {
        var _this = this;
        var autoLoad = typeof this.configuration.model === 'string' || (this.configuration.model && this.configuration.model.url);
        return this._initEngine().then(function (engine) {
            return _this.onEngineInitObservable.notifyObserversWithPromise(engine);
        }).then(function () {
            _this._initTelemetryEvents();
            if (autoLoad) {
                return _this.loadModel(_this.configuration.model).catch(function () { }).then(function () { return _this.sceneManager.scene; });
            }
            else {
                return _this.sceneManager.scene || _this.sceneManager.initScene(_this.configuration.scene);
            }
        }).then(function () {
            return _this.onInitDoneObservable.notifyObserversWithPromise(_this);
        }).catch(function (e) {
            console.log(e.toString());
            return _this;
        });
    };
    RenderOnlyViewer.prototype._prepareContainerElement = function () {
    };
    return RenderOnlyViewer;
}(AbstractViewer));
export { RenderOnlyViewer };
//# sourceMappingURL=renderOnlyViewer.js.map