{"version":3,"file":"viewerLabs.js","sourceRoot":"","sources":["../../../../sourceES6/viewer/src/labs/viewerLabs.ts"],"names":[],"mappings":"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","sourcesContent":["import { PBREnvironment, EnvironmentDeserializer } from \"./environmentSerializer\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { Vector3, Quaternion, Matrix, TmpVectors } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { SphericalPolynomial } from \"@babylonjs/core/Maths/sphericalPolynomial\";\r\nimport { ShadowLight } from \"@babylonjs/core/Lights/shadowLight\";\r\nimport { TextureUtils } from \"./texture\";\r\nimport { Axis } from \"@babylonjs/core/Maths/math.axis\";\r\n\r\n/**\r\n * The ViewerLabs class will hold functions that are not (!) backwards compatible.\r\n * The APIs in all labs-related classes and configuration  might change.\r\n * Once stable, lab features will be moved to the publis API and configuration object.\r\n */\r\nexport class ViewerLabs {\r\n\r\n    constructor(private _scene: Scene) { }\r\n\r\n    public assetsRootURL: string;\r\n    public environment: PBREnvironment = {\r\n        //irradiance\r\n        irradiancePolynomialCoefficients: {\r\n            x: new Vector3(0, 0, 0),\r\n            y: new Vector3(0, 0, 0),\r\n            z: new Vector3(0, 0, 0),\r\n            xx: new Vector3(0, 0, 0),\r\n            yy: new Vector3(0, 0, 0),\r\n            zz: new Vector3(0, 0, 0),\r\n            yz: new Vector3(0, 0, 0),\r\n            zx: new Vector3(0, 0, 0),\r\n            xy: new Vector3(0, 0, 0)\r\n        },\r\n\r\n        textureIntensityScale: 1.0\r\n    };\r\n\r\n    /**\r\n         * Loads an environment map from a given URL\r\n         * @param url URL of environment map\r\n         * @param onSuccess Callback fired after environment successfully applied to the scene\r\n         * @param onProgress Callback fired at progress events while loading the environment map\r\n         * @param onError Callback fired when the load fails\r\n         */\r\n    public loadEnvironment(url: string, onSuccess?: (env: PBREnvironment) => void, onProgress?: (bytesLoaded: number, bytesTotal: number) => void, onError?: (e: any) => void): void;\r\n    /**\r\n     * Loads an environment map from a given URL\r\n     * @param buffer ArrayBuffer containing environment map\r\n     * @param onSuccess Callback fired after environment successfully applied to the scene\r\n     * @param onProgress Callback fired at progress events while loading the environment map\r\n     * @param onError Callback fired when the load fails\r\n     */\r\n    public loadEnvironment(buffer: ArrayBuffer, onSuccess?: (env: PBREnvironment) => void, onProgress?: (bytesLoaded: number, bytesTotal: number) => void, onError?: (e: any) => void): void;\r\n    /**\r\n     * Sets the environment to an already loaded environment\r\n     * @param env PBREnvironment instance\r\n     * @param onSuccess Callback fired after environment successfully applied to the scene\r\n     * @param onProgress Callback fired at progress events while loading the environment map\r\n     * @param onError Callback fired when the load fails\r\n     */\r\n    public loadEnvironment(env: PBREnvironment, onSuccess?: (env: PBREnvironment) => void, onProgress?: (bytesLoaded: number, bytesTotal: number) => void, onError?: (e: any) => void): void;\r\n    public loadEnvironment(data: string | ArrayBuffer | PBREnvironment, onSuccess?: (env: PBREnvironment) => void, onProgress?: (bytesLoaded: number, bytesTotal: number) => void, onError?: (e: any) => void): void {\r\n        //@! todo: should loadEnvironment cancel any currently loading environments?\r\n        if (data instanceof ArrayBuffer) {\r\n            this.environment = EnvironmentDeserializer.Parse(data);\r\n            if (onSuccess) { onSuccess(this.environment); }\r\n        } else if (typeof data === 'string') {\r\n            let url = this.getAssetUrl(data);\r\n            this._scene._loadFile(\r\n                url,\r\n                (arrayBuffer: ArrayBuffer) => {\r\n                    this.environment = EnvironmentDeserializer.Parse(arrayBuffer);\r\n                    if (onSuccess) { onSuccess(this.environment); }\r\n                },\r\n                (progressEvent) => { if (onProgress) { onProgress(progressEvent.loaded, progressEvent.total); } },\r\n                false,\r\n                true,\r\n                (r, e) => {\r\n                    if (onError) {\r\n                        onError(e);\r\n                    }\r\n                }\r\n            );\r\n        } else {\r\n            //data assumed to be PBREnvironment object\r\n            this.environment = data;\r\n            if (onSuccess) { onSuccess(data); }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies an `EnvironmentMapConfiguration` to the scene\r\n     * @param environmentMapConfiguration Environment map configuration to apply\r\n     */\r\n    public applyEnvironmentMapConfiguration(rotationY?: number) {\r\n        if (!this.environment) { return; }\r\n\r\n        //set orientation\r\n        let rotatquatRotationionY = Quaternion.RotationAxis(Axis.Y, rotationY || 0);\r\n\r\n        // Add env texture to the scene.\r\n        if (this.environment.specularTexture) {\r\n            // IE crashes when disposing the old texture and setting a new one\r\n            if (!this._scene.environmentTexture) {\r\n                this._scene.environmentTexture = TextureUtils.GetBabylonCubeTexture(this._scene, this.environment.specularTexture, false, true);\r\n            }\r\n            if (this._scene.environmentTexture) {\r\n                this._scene.environmentTexture.level = this.environment.textureIntensityScale;\r\n                this._scene.environmentTexture.invertZ = true;\r\n                this._scene.environmentTexture.lodLevelInAlpha = true;\r\n\r\n                var poly = this._scene.environmentTexture.sphericalPolynomial || new SphericalPolynomial();\r\n                poly.x = this.environment.irradiancePolynomialCoefficients.x;\r\n                poly.y = this.environment.irradiancePolynomialCoefficients.y;\r\n                poly.z = this.environment.irradiancePolynomialCoefficients.z;\r\n                poly.xx = this.environment.irradiancePolynomialCoefficients.xx;\r\n                poly.xy = this.environment.irradiancePolynomialCoefficients.xy;\r\n                poly.yy = this.environment.irradiancePolynomialCoefficients.yy;\r\n                poly.yz = this.environment.irradiancePolynomialCoefficients.yz;\r\n                poly.zx = this.environment.irradiancePolynomialCoefficients.zx;\r\n                poly.zz = this.environment.irradiancePolynomialCoefficients.zz;\r\n                this._scene.environmentTexture.sphericalPolynomial = poly;\r\n\r\n                //set orientation\r\n                Matrix.FromQuaternionToRef(rotatquatRotationionY, this._scene.environmentTexture.getReflectionTextureMatrix());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an environment asset url by using the configuration if the path is not absolute.\r\n     * @param url Asset url\r\n     * @returns The Asset url using the `environmentAssetsRootURL` if the url is not an absolute path.\r\n     */\r\n    public getAssetUrl(url: string): string {\r\n        let returnUrl = url;\r\n        if (url && url.toLowerCase().indexOf(\"//\") === -1) {\r\n            if (!this.assetsRootURL) {\r\n                // Tools.Warn(\"Please, specify the root url of your assets before loading the configuration (labs.environmentAssetsRootURL) or disable the background through the viewer options.\");\r\n                return url;\r\n            }\r\n\r\n            returnUrl = this.assetsRootURL + returnUrl;\r\n        }\r\n\r\n        return returnUrl;\r\n    }\r\n\r\n    public rotateShadowLight(shadowLight: ShadowLight, amount: number, point = Vector3.Zero(), axis = Axis.Y, target = Vector3.Zero()) {\r\n        axis.normalize();\r\n        point.subtractToRef(shadowLight.position, TmpVectors.Vector3[0]);\r\n        Matrix.TranslationToRef(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z, TmpVectors.Matrix[0]);\r\n        TmpVectors.Matrix[0].invertToRef(TmpVectors.Matrix[2]);\r\n        Matrix.RotationAxisToRef(axis, amount, TmpVectors.Matrix[1]);\r\n        TmpVectors.Matrix[2].multiplyToRef(TmpVectors.Matrix[1], TmpVectors.Matrix[2]);\r\n        TmpVectors.Matrix[2].multiplyToRef(TmpVectors.Matrix[0], TmpVectors.Matrix[2]);\r\n\r\n        TmpVectors.Matrix[2].decompose(TmpVectors.Vector3[0], TmpVectors.Quaternion[0], TmpVectors.Vector3[1]);\r\n\r\n        shadowLight.position.addInPlace(TmpVectors.Vector3[1]);\r\n\r\n        shadowLight.setDirectionToTarget(target);\r\n    }\r\n\r\n}"]}