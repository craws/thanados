{"version":3,"file":"loaderPlugin.js","sourceRoot":"","sources":["../../../../../sourceES6/viewer/src/loader/plugins/loaderPlugin.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewerModel } from \"../../model/viewerModel\";\r\nimport { IGLTFLoaderExtension, IGLTFLoaderData } from \"@babylonjs/loaders/glTF/glTFFileLoader\";\r\nimport { ISceneLoaderPlugin, ISceneLoaderPluginAsync } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { SceneLoaderProgressEvent } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport { AbstractMesh } from \"@babylonjs/core/Meshes/abstractMesh\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Material } from \"@babylonjs/core/Materials/material\";\r\n\r\n/**\r\n * This interface defines the structure of a loader plugin.\r\n * Any of those functions will be called if (!) the loader supports those callbacks.\r\n * Any loader supports onInit, onLoaded, onError and onProgress.\r\n */\r\nexport interface ILoaderPlugin {\r\n    onInit?: (loader: ISceneLoaderPlugin | ISceneLoaderPluginAsync, model: ViewerModel) => void;\r\n    onLoaded?: (model: ViewerModel) => void;\r\n    onError?: (message: string, exception?: any) => void;\r\n    onProgress?: (progressEvent: SceneLoaderProgressEvent) => void;\r\n    onExtensionLoaded?: (extension: IGLTFLoaderExtension) => void;\r\n    onParsed?: (parsedData: IGLTFLoaderData) => void;\r\n    onMeshLoaded?: (mesh: AbstractMesh) => void;\r\n    onTextureLoaded?: (texture: BaseTexture) => void;\r\n    onMaterialLoaded?: (material: Material) => void;\r\n    onComplete?: () => void;\r\n}"]}