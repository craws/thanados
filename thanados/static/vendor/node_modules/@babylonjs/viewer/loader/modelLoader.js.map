{"version":3,"file":"modelLoader.js","sourceRoot":"","sources":["../../../../sourceES6/viewer/src/loader/modelLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import {GLTFFileLoader, GLTFLoaderAnimationStartMode} from \"@babylonjs/loaders/glTF/glTFFileLoader\"\r\nimport { ISceneLoaderPlugin, ISceneLoaderPluginAsync } from '@babylonjs/core/Loading/sceneLoader';\r\nimport { Tools } from '@babylonjs/core/Misc/tools';\r\nimport { SceneLoader } from '@babylonjs/core/Loading/sceneLoader';\r\nimport { Tags } from '@babylonjs/core/Misc/tags';\r\n\r\nimport { ConfigurationContainer } from '../configuration/configurationContainer';\r\nimport { IModelConfiguration } from '../configuration/interfaces/modelConfiguration';\r\nimport { ObservablesManager } from '../managers/observablesManager';\r\nimport { ModelState, ViewerModel } from '../model/viewerModel';\r\nimport { getLoaderPluginByName, ILoaderPlugin } from './plugins/';\r\n\r\n/**\r\n * An instance of the class is in charge of loading the model correctly.\r\n * This class will continously be expended with tasks required from the specific loaders Babylon has.\r\n *\r\n * A Model loader is unique per (Abstract)Viewer. It is being generated by the viewer\r\n */\r\nexport class ModelLoader {\r\n\r\n    private _loadId: number;\r\n    private _disposed = false;\r\n\r\n    private _loaders: Array<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n\r\n    private _plugins: Array<ILoaderPlugin>;\r\n\r\n    private _baseUrl: string;\r\n\r\n    public get baseUrl(): string {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    /**\r\n     * Create a new Model loader\r\n     * @param _viewer the viewer using this model loader\r\n     */\r\n    constructor(private _observablesManager: ObservablesManager, private _configurationContainer?: ConfigurationContainer) {\r\n        this._loaders = [];\r\n        this._loadId = 0;\r\n        this._plugins = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the loader process.\r\n     *\r\n     * @param plugin the plugin name or the plugin itself\r\n     */\r\n    public addPlugin(plugin: ILoaderPlugin | string) {\r\n        let actualPlugin: ILoaderPlugin = {};\r\n        if (typeof plugin === 'string') {\r\n            let loadedPlugin = getLoaderPluginByName(plugin);\r\n            if (loadedPlugin) {\r\n                actualPlugin = loadedPlugin;\r\n            }\r\n        } else {\r\n            actualPlugin = plugin;\r\n        }\r\n        if (actualPlugin && this._plugins.indexOf(actualPlugin) === -1) {\r\n            this._plugins.push(actualPlugin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load a model using predefined configuration\r\n     * @param modelConfiguration the modelConfiguration to use to load the model\r\n     */\r\n    public load(modelConfiguration: IModelConfiguration): ViewerModel {\r\n        \r\n        const model = new ViewerModel(this._observablesManager, modelConfiguration, this._configurationContainer);\r\n\r\n        model.loadId = this._loadId++;\r\n\r\n        let filename: any;\r\n        if (modelConfiguration.file) {\r\n            this._baseUrl = \"file:\";\r\n            filename = modelConfiguration.file;\r\n        }\r\n        else if (modelConfiguration.url) {\r\n            filename = Tools.GetFilename(modelConfiguration.url) || modelConfiguration.url;\r\n            this._baseUrl = modelConfiguration.root || Tools.GetFolderPath(modelConfiguration.url);\r\n        }\r\n\r\n        if (!filename || !this._baseUrl) {\r\n            model.state = ModelState.ERROR;\r\n            Tools.Error(\"No URL provided\");\r\n            return model;\r\n        }\r\n\r\n        let plugin = modelConfiguration.loader;\r\n\r\n        let scene = model.rootMesh.getScene();\r\n\r\n        model.loader = SceneLoader.ImportMesh(undefined, this._baseUrl, filename, scene, (meshes, particleSystems, skeletons, animationGroups) => {\r\n            meshes.forEach((mesh) => {\r\n                Tags.AddTagsTo(mesh, \"viewerMesh\");\r\n                model.addMesh(mesh);\r\n            });\r\n            model.particleSystems = particleSystems;\r\n            model.skeletons = skeletons;\r\n\r\n            for (const animationGroup of animationGroups) {\r\n                model.addAnimationGroup(animationGroup);\r\n            }\r\n\r\n            this._checkAndRun(\"onLoaded\", model);\r\n            scene.executeWhenReady(() => {\r\n                model.onLoadedObservable.notifyObservers(model);\r\n            });\r\n        }, (progressEvent) => {\r\n            this._checkAndRun(\"onProgress\", progressEvent);\r\n            model.onLoadProgressObservable.notifyObserversWithPromise(progressEvent);\r\n        }, (scene, m, exception) => {\r\n            model.state = ModelState.ERROR;\r\n            Tools.Error(\"Load Error: There was an error loading the model. \" + m);\r\n            this._checkAndRun(\"onError\", m, exception);\r\n            model.onLoadErrorObservable.notifyObserversWithPromise({ message: m, exception: exception });\r\n        }, plugin)!;\r\n\r\n        if (model.loader.name === \"gltf\") {\r\n            let gltfLoader = (<GLTFFileLoader>model.loader);\r\n            gltfLoader.animationStartMode = GLTFLoaderAnimationStartMode.NONE;\r\n            gltfLoader.compileMaterials = true;\r\n\r\n            if (!modelConfiguration.file) {\r\n                gltfLoader.rewriteRootURL = (rootURL, responseURL) => {\r\n                    return modelConfiguration.root || Tools.GetFolderPath(responseURL || modelConfiguration.url || '');\r\n                };\r\n            }\r\n            // if ground is set to \"mirror\":\r\n            if (this._configurationContainer\r\n                && this._configurationContainer.configuration\r\n                && this._configurationContainer.configuration.ground\r\n                && typeof this._configurationContainer.configuration.ground === 'object'\r\n                && this._configurationContainer.configuration.ground.mirror) {\r\n                gltfLoader.useClipPlane = true;\r\n            }\r\n            Object.keys(gltfLoader).filter((name) => name.indexOf('on') === 0 && name.indexOf('Observable') !== -1).forEach((functionName) => {\r\n                gltfLoader[functionName].add((payload) => {\r\n                    this._checkAndRun(functionName.replace(\"Observable\", ''), payload);\r\n                });\r\n            });\r\n\r\n            gltfLoader.onParsedObservable.add((data) => {\r\n                if (data && data.json && data.json['asset']) {\r\n                    model.loadInfo = data.json['asset'];\r\n                }\r\n            });\r\n\r\n            gltfLoader.onCompleteObservable.add(() => {\r\n                model.loaderDone = true;\r\n            });\r\n        } else {\r\n            model.loaderDone = true;\r\n        }\r\n\r\n        this._checkAndRun(\"onInit\", model.loader, model);\r\n\r\n        this._loaders.push(model.loader);\r\n\r\n        return model;\r\n    }\r\n\r\n    public cancelLoad(model: ViewerModel) {\r\n        const loader = model.loader || this._loaders[model.loadId];\r\n        // ATM only available in the GLTF Loader\r\n        if (loader && loader.name === \"gltf\") {\r\n            let gltfLoader = (<GLTFFileLoader>loader);\r\n            gltfLoader.dispose();\r\n            model.state = ModelState.CANCELED;\r\n        } else {\r\n            Tools.Warn(\"This type of loader cannot cancel the request\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dispose the model loader.\r\n     * If loaders are registered and are in the middle of loading, they will be disposed and the request(s) will be cancelled.\r\n     */\r\n    public dispose() {\r\n        this._loaders.forEach((loader) => {\r\n            if (loader.name === \"gltf\") {\r\n                (<GLTFFileLoader>loader).dispose();\r\n            }\r\n        });\r\n        this._loaders.length = 0;\r\n        this._disposed = true;\r\n    }\r\n\r\n    private _checkAndRun(functionName: string, ...payload: Array<any>) {\r\n        if (this._disposed) { return; }\r\n        this._plugins.filter((p) => p[functionName]).forEach((plugin) => {\r\n            try {\r\n                plugin[functionName].apply(this, payload);\r\n            } catch (e) { }\r\n        });\r\n    }\r\n}"]}