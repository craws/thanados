import { ConfigurationContainer } from '../configuration/configurationContainer';
import { IModelConfiguration } from '../configuration/interfaces/modelConfiguration';
import { ObservablesManager } from '../managers/observablesManager';
import { ViewerModel } from '../model/viewerModel';
import { ILoaderPlugin } from './plugins/';
/**
 * An instance of the class is in charge of loading the model correctly.
 * This class will continously be expended with tasks required from the specific loaders Babylon has.
 *
 * A Model loader is unique per (Abstract)Viewer. It is being generated by the viewer
 */
export declare class ModelLoader {
    private _observablesManager;
    private _configurationContainer?;
    private _loadId;
    private _disposed;
    private _loaders;
    private _plugins;
    private _baseUrl;
    get baseUrl(): string;
    /**
     * Create a new Model loader
     * @param _viewer the viewer using this model loader
     */
    constructor(_observablesManager: ObservablesManager, _configurationContainer?: ConfigurationContainer | undefined);
    /**
     * Adds a new plugin to the loader process.
     *
     * @param plugin the plugin name or the plugin itself
     */
    addPlugin(plugin: ILoaderPlugin | string): void;
    /**
     * Load a model using predefined configuration
     * @param modelConfiguration the modelConfiguration to use to load the model
     */
    load(modelConfiguration: IModelConfiguration): ViewerModel;
    cancelLoad(model: ViewerModel): void;
    /**
     * dispose the model loader.
     * If loaders are registered and are in the middle of loading, they will be disposed and the request(s) will be cancelled.
     */
    dispose(): void;
    private _checkAndRun;
}
