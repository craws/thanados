import { Observable } from "@babylonjs/core/Misc/observable";
/**
 * Receives Telemetry events and raises events to the API
 */
var TelemetryManager = /** @class */ (function () {
    function TelemetryManager() {
        this.onEventBroadcastedObservable = new Observable();
        this._event = this._eventEnabled;
    }
    Object.defineProperty(TelemetryManager.prototype, "broadcast", {
        /**
         * Receives a telemetry event
         * @param event The name of the Telemetry event
         * @param details An additional value, or an object containing a list of property/value pairs
         */
        get: function () {
            return this._event;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Log a Telemetry event for errors raised on the WebGL context.
     * @param engine The Babylon engine with the WebGL context.
     */
    TelemetryManager.prototype.flushWebGLErrors = function (engine, viewerId) {
        if (!engine) {
            return;
        }
        var logErrors = true;
        while (logErrors) {
            var error = engine.getError();
            if (error === 0) {
                logErrors = false;
            }
            else {
                this.broadcast("WebGL Error", viewerId, { error: error });
            }
        }
    };
    Object.defineProperty(TelemetryManager.prototype, "enable", {
        /**
         * Enable or disable telemetry events
         * @param enabled Boolan, true if events are enabled
         */
        set: function (enabled) {
            if (enabled) {
                this._event = this._eventEnabled;
            }
            else {
                this._event = this._eventDisabled;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called on event when disabled, typically do nothing here
     */
    TelemetryManager.prototype._eventDisabled = function () {
        // nothing to do
    };
    /**
     * Called on event when enabled
     * @param event - The name of the Telemetry event
     * @param details An additional value, or an object containing a list of property/value pairs
     */
    TelemetryManager.prototype._eventEnabled = function (event, viewerId, details) {
        var telemetryData = {
            viewerId: viewerId,
            event: event,
            session: this.session,
            date: new Date(),
            now: window.performance ? window.performance.now() : Date.now(),
            detail: null
        };
        if (typeof details === "object") {
            for (var attr in details) {
                if (details.hasOwnProperty(attr)) {
                    telemetryData[attr] = details[attr];
                }
            }
        }
        else if (details) {
            telemetryData.detail = details;
        }
        this.onEventBroadcastedObservable.notifyObservers(telemetryData);
    };
    Object.defineProperty(TelemetryManager.prototype, "session", {
        /**
         * Returns the current session ID or creates one if it doesn't exixt
         * @return The current session ID
         */
        get: function () {
            if (!this._currentSessionId) {
                //String + Timestamp + Random Integer
                this._currentSessionId = "SESSION_" + Date.now() + Math.floor(Math.random() * 0x10000);
            }
            return this._currentSessionId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Disposes the telemetry manager
     */
    TelemetryManager.prototype.dispose = function () {
        this.onEventBroadcastedObservable.clear();
        delete this.onEventBroadcastedObservable;
    };
    return TelemetryManager;
}());
export { TelemetryManager };
export var telemetryManager = new TelemetryManager();
//# sourceMappingURL=telemetryManager.js.map